generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model QrCode {
    id          String   @id @default(cuid())
    userId      String
    name        String
    url         String
    image       String?  @db.Text
    qrCodeImage String   @db.Text
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Link {
    id        String   @id @default(cuid())
    userId    String
    websiteId String
    name      String
    url       String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    website   Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([websiteId])
}

model Website {
    id        String   @id @default(cuid())
    userId    String
    name      String
    image     String   @db.Text
    url       String   @unique
    links     Link[]
    qrCode    String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    credits       Int       @default(0)
    plan          String    @default("Beginner")
    qrCodes       QrCode[]
    websites      Website[]
    Links         Link[]
    isAdmin       Boolean   @default(false)
}
